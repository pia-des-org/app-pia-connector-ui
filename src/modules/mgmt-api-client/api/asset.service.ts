/**
 * EDC REST API
 * EDC REST APIs - merged by OpenApiMerger
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Injectable } from '@angular/core';
import {
  HttpResponse,
  HttpEvent,
  HttpContext,
} from '@angular/common/http';
import { Observable, from } from 'rxjs';
import { AssetInput, Asset, IdResponse, QuerySpec } from "../model";
import { EdcConnectorProviderService } from "../../app/edc.connector.client.provider";

@Injectable({
  providedIn: 'root',
})
export class AssetService {
  private get assets() {
    return this.connectorProvider.getClient().management.assets;
  }

  constructor(private connectorProvider: EdcConnectorProviderService) {}

  public createAsset(
    assetEntryDto: AssetInput,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<IdResponse>;
  public createAsset(
    assetEntryDto: AssetInput,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpResponse<IdResponse>>;
  public createAsset(
    assetEntryDto: AssetInput,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpEvent<IdResponse>>;
  public createAsset(assetEntryDto: AssetInput): Observable<any> {
    return from(this.assets.create(assetEntryDto));
  }

  public getAsset(
    id: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<Asset>;
  public getAsset(
    id: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpResponse<Asset>>;
  public getAsset(
    id: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpEvent<Asset>>;
  public getAsset(id: string): Observable<any> {
    if (!id) {
      throw new Error('Required parameter id was null or undefined when calling getAsset.');
    }
    return from(this.assets.get(id));
  }

  public removeAsset(
    id: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<any>;
  public removeAsset(
    id: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpResponse<any>>;
  public removeAsset(
    id: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpEvent<any>>;
  public removeAsset(id: string): Observable<any> {
    if (!id) {
      throw new Error('Required parameter id was null or undefined when calling removeAsset.');
    }
    return from(this.assets.delete(id));
  }

  public requestAssets(
    querySpec?: QuerySpec,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<Array<Asset>>;
  public requestAssets(
    querySpec?: QuerySpec,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpResponse<Array<Asset>>>;
  public requestAssets(
    querySpec?: QuerySpec,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext }
  ): Observable<HttpEvent<Array<Asset>>>;
  public requestAssets(querySpec?: QuerySpec): Observable<any> {
    return from(this.assets.queryAll(querySpec));
  }
}
